// Generated by CoffeeScript 1.6.3
(function() {
  var async, asyncRender, blocks, env, findLayouts, fs, getComponentViewPath, getRealPath, handlebars, layouts, renderFromRealPath, templateLoader, _;

  _ = require("lodash");

  fs = require("fs");

  env = require("../enviroments");

  templateLoader = require("./template_loader");

  handlebars = require("handlebars");

  asyncRender = require("./async_render");

  async = require("async");

  require("./helpers");

  env.extraHelpers.forEach(function(helperPath) {
    var e;
    try {
      return require(helperPath)(handlebars);
    } catch (_error) {
      e = _error;
      return console.error("error when load extra helper file: " + helperPath, e);
    }
  });

  blocks = {};

  handlebars.registerHelper("partial", function(name, options) {
    var block;
    if (!(block = blocks[name])) {
      block = blocks[name] = [];
    }
    block.push(options.fn(this));
    return void 0;
  });

  handlebars.registerHelper("block", function(name, options) {
    var block, content;
    block = blocks[name] || [];
    if (block.length === 0) {
      if (options.fn) {
        return options.fn(this);
      } else {
        return "";
      }
    } else {
      content = block.join("\n");
      blocks[name] = [];
      return content;
    }
  });

  layouts = [];

  findLayouts = function(dir) {
    var files;
    files = fs.readdirSync(dir);
    return files.forEach(function(file) {
      var filePath, stat;
      filePath = "" + dir + "/" + file;
      stat = fs.statSync(filePath);
      if (stat.isDirectory()) {
        return findLayouts(filePath);
      } else {
        if (file[0] === "_" && file.split(".")[1] === "hbs") {
          return layouts.push(filePath);
        }
      }
    });
  };

  findLayouts(env.viewsHome);

  layouts.forEach(function(file) {
    var name, t;
    t = fs.readFileSync(file);
    name = file.slice(env.viewsHome.length + 1).split(".")[0];
    handlebars.registerPartial(name, handlebars.compile(t.toString()));
    return console.log("register layout: [" + name + "]");
  });

  _.forEach(env.partials, function(file, name) {
    var filePath, t;
    filePath = "" + env.viewsHome + "/" + file;
    if (!fs.existsSync(filePath)) {
      return;
    }
    t = fs.readFileSync(filePath);
    handlebars.registerPartial(name, handlebars.compile(t.toString()));
    return console.log("register partial: [" + name + "]");
  });

  getRealPath = function(path) {
    return "" + env.viewsHome + "/" + path + ".hbs";
  };

  getComponentViewPath = function(path) {
    return "" + env.componentsHome + "/" + path + "/view.hbs";
  };

  renderFromRealPath = function(path, context, cb) {
    if (cb === void 0 && typeof context === "function") {
      cb = context;
      context = {};
    }
    return async.waterfall([
      function(next) {
        return templateLoader.fromPath(path, next);
      }, function(template, next) {
        return asyncRender["do"](template, context, next);
      }
    ], cb);
  };

  module.exports = {
    renderFile: function(path, context, cb) {
      return renderFromRealPath(getRealPath(path), context, cb);
    },
    renderComponent: function(path, context, cb) {
      return renderFromRealPath(getComponentViewPath(path), context, cb);
    },
    renderInline: function(templateStr, context, cb) {
      var template;
      if (cb === void 0 && typeof context === "function") {
        cb = context;
        context = {};
      }
      template = templateLoader.fromText(templateStr);
      return asyncRender["do"](template, context, cb);
    }
  };

  require("./render_helpers");

}).call(this);
