// Generated by CoffeeScript 1.6.3
(function() {
  var FileNotFoundError, blocks, env, fs, getComponentViewPath, getRealPath, handlebars, normalizePath, registerLayout, renderFromRealPath, templateLoader, _;

  _ = require("lodash");

  fs = require("fs");

  env = require("../enviroments");

  templateLoader = require("./template_loader");

  handlebars = require("handlebars");

  FileNotFoundError = require("../errors").FileNotFoundError;

  require("./helpers");

  env.extraHelpers.forEach(function(helperPath) {
    var e;
    try {
      return require(helperPath)(handlebars);
    } catch (_error) {
      e = _error;
      return console.error("error when load extra helper file: " + helperPath, e);
    }
  });

  blocks = {};

  handlebars.registerHelper("partial", function(name, options) {
    var block;
    if (!(block = blocks[name])) {
      block = blocks[name] = [];
    }
    block.push(options.fn(this));
    return void 0;
  });

  handlebars.registerHelper("block", function(name, options) {
    var block, content;
    block = blocks[name] || [];
    if (block.length === 0) {
      if (options.fn) {
        return options.fn(this);
      } else {
        return "";
      }
    } else {
      content = block.join("\n");
      blocks[name] = [];
      return content;
    }
  });

  registerLayout = function() {
    var findLayouts, layouts;
    layouts = [];
    findLayouts = function(dir) {
      var files;
      files = fs.readdirSync(dir);
      return files.forEach(function(file) {
        var filePath, stat;
        filePath = "" + dir + "/" + file;
        stat = fs.statSync(filePath);
        if (stat.isDirectory()) {
          return findLayouts(filePath);
        } else {
          if (/layout\.hbs$/.test(file)) {
            return layouts.push(filePath);
          }
        }
      });
    };
    findLayouts(env.viewsHome);
    return layouts.forEach(function(file) {
      var name, t;
      t = fs.readFileSync(file);
      name = file.slice(env.viewsHome.length + 1).split(".")[0];
      if (env.oldMode) {
        name = "views/" + name;
      }
      return handlebars.registerPartial(name, handlebars.compile(t.toString()));
    });
  };

  normalizePath = function(path) {
    if (path[0] === "/") {
      return path.slice(1);
    } else {
      return path;
    }
  };

  getRealPath = function(path) {
    if (env.pageMode) {
      return "" + env.viewsHome + "/" + (normalizePath(path)) + "/view.hbs";
    } else {
      return "" + env.viewsHome + "/" + (normalizePath(path)) + ".hbs";
    }
  };

  getComponentViewPath = function(path) {
    return "" + env.componentsHome + "/" + (normalizePath(path)) + "/view.hbs";
  };

  renderFromRealPath = function(path, context) {
    var template;
    template = templateLoader.fromPathSync(path);
    return template(context);
  };

  module.exports = {
    renderFile: function(path, context) {
      var err;
      try {
        return renderFromRealPath(getRealPath(path), context);
      } catch (_error) {
        err = _error;
        if (err instanceof FileNotFoundError) {
          console.log("[View Not Found] " + err.path);
          return "404 view not found: " + err.path;
        } else {
          throw err;
        }
      }
    },
    renderComponent: function(path, context) {
      var err;
      context = context || {};
      context[this.CONST.COMP_PATH] = path;
      try {
        return renderFromRealPath(getComponentViewPath(path), context);
      } catch (_error) {
        err = _error;
        if (err instanceof FileNotFoundError) {
          console.log("[Component Not Found] " + err.path);
          return "component view not found: " + err.path;
        } else {
          throw err;
        }
      }
    },
    registerLayout: registerLayout,
    CONST: {
      COMP_PATH: "COMP_PATH"
    }
  };

  require("./render_helpers");

}).call(this);
