// Generated by CoffeeScript 1.6.3
(function() {
  var Async, handlebars, _;

  handlebars = require("handlebars");

  _ = require("lodash");

  Async = (function() {
    function Async() {
      this.values = {};
      this.callback = void 0;
      this.resolved = false;
      this.count = 0;
      this.idCount = 0;
    }

    Async.prototype.genId = function() {
      return "__ASYNC_PLACEHOLDER_" + (this.idCount++) + "__";
    };

    Async.prototype.deferred = function() {
      return ++this.count;
    };

    Async.prototype.resolve = function(id, value) {
      this.values[id] = value;
      if (--this.count === 0) {
        this.resolved = true;
        return typeof this.callback === "function" ? this.callback() : void 0;
      }
    };

    Async.prototype.done = function(cb) {
      this.callback = cb;
      if (this.resolved) {
        return this.callback();
      }
    };

    Async.KEY = "__ASYNC__";

    Async["do"] = function(t, content, cb) {
      var async, e, result;
      if (cb === void 0 && typeof content === "function") {
        cb = content;
        content = {};
      }
      content = content || {};
      if (content[this.KEY] !== void 0) {
        content = _.clone(content);
        content[this.KEY] = void 0;
      }
      try {
        result = t(content);
      } catch (_error) {
        e = _error;
        console.error("error when render template: " + t);
        cb(e);
      }
      async = content[this.KEY];
      if (async === void 0) {
        return cb(void 0, result);
      } else {
        return async.done(function() {
          var vals;
          vals = this.values;
          Object.keys(vals).forEach(function(id) {
            return result = result.replace(id, vals[id].toString());
          });
          return cb(void 0, result);
        });
      }
    };

    Async.resolve = function(fn, context, args) {
      var async, id;
      async = context[this.KEY];
      if (async === void 0) {
        async = context[this.KEY] = new Async;
      }
      async.deferred();
      id = async.genId();
      [].push.call(args, function(result) {
        return async.resolve(id, result);
      });
      fn.apply(context, args);
      return id;
    };

    return Async;

  })();

  module.exports = {
    "do": Async["do"].bind(Async),
    registerAsyncHelper: function(name, fn) {
      return handlebars.registerHelper(name, function() {
        return Async.resolve(fn, this, arguments);
      });
    }
  };

}).call(this);
